plugins {
    id 'com.android.application'

    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion 30
    buildToolsVersion '30.0.2'

    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def value = 0
        def runTasks = gradle.getStartParameter().getTaskRequests().toString()
        if (runTasks.contains('assembleRelease') || runTasks.contains('aR')) {
            value = 1
        }
        def versionMajor = 0
        def versionMinor = 3
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
        def versionNumber = versionProps['VERSION_NUMBER'].toInteger() + value

        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['VERSION_NUMBER'] = versionNumber.toString()

        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "com.deledzis.messenger"
            minSdkVersion 21
            targetSdkVersion 30
            versionCode versionNumber
            versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    buildTypes {
        debug {
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    def formattedDate = new Date().format('dd.MM.yyyy')
                    outputFileName = "${applicationName}_v${variant.versionName}_${formattedDate}_debug.apk"
                }
            }
        }
        release {
            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
            signingConfig signingConfigs.release
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    def formattedDate = new Date().format('dd.MM.yyyy')
                    outputFileName = "${applicationName}_v${variant.versionName}_${formattedDate}_release.apk"
                }
            }
        }
    }
    // Specifies one flavor dimension.
    flavorDimensions "version"
    productFlavors {
        mock {
            // Assigns this product flavor to the "version" flavor dimension.
            // If you are using only one dimension, this property is optional,
            // and the plugin automatically assigns all the module's flavors to
            // that dimension.
            dimension "version"
            versionNameSuffix "-mock"

            resValue "string", "api_version", "v1"
            resValue "string", "base_url", "http://10.0.2.2:8080"
        }
        production {
            dimension "version"
            versionNameSuffix "-prod"

            resValue "string", "api_version", "v1"
            resValue "string", "base_url", "https://spbstu-messenger.herokuapp.com"
        }
    }
    // To inline the bytecode built with JVM target 1.8 into
    // bytecode that is being built with JVM target 1.6. (e.g. navArgs)
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    dataBinding {
        enabled = true
    }

    buildFeatures {
        dataBinding true
    }
}

dependencies {
    def x_compat_version = '1.2.0'
    def x_core_version = '1.3.2'
    def material_version = '1.2.1'
    def constraint_version = '2.0.4'
    def annotation_version = "1.1.0"
    def legacy_version = "1.0.0"
    def lifecycle_ext_version = "2.2.0"
    def kotlin_coroutine_version_android = "1.4.1"
    def kotlin_coroutine_version_core = "1.3.9"
    def navigation_version = '2.3.2'
    def okhttp_version = '4.9.0'
    def retrofit_version = '2.9.0'
    def gson_version = "2.8.6"
    def glide_version = "4.11.0"
    def rxjava_version = "2.2.10"
    def rxandroid_version = "2.1.1"
    def dagger_version = '2.30.1'
    def room_version = "2.2.1"
    def room_coroutines_version = "2.1.0-alpha04"
    def paging_runtime_version = "2.1.2"
    def work_manager_version = "2.4.0"
    def junit_version = '4.13.1'
    def android_junit_version = '1.1.2'
    def espresso_version = '3.3.0'

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$x_compat_version"
    implementation "androidx.core:core-ktx:$x_core_version"
    implementation "androidx.legacy:legacy-support-v4:$legacy_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_version"
    implementation "androidx.annotation:annotation:$annotation_version"

    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_ext_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_ext_version"

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutine_version_android"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutine_version_core"

    // Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // OkHttp 4
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    // Retrofit 2
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    // RxJava 2
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"

    // Dagger 2
    api "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    api "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // Gson
    implementation "com.google.code.gson:gson:$gson_version"

    // Glide
    implementation("com.github.bumptech.glide:glide:$glide_version") {
        exclude group: "com.android.support"
    }

    // Room
    implementation "android.arch.persistence.room:runtime:$room_version"
    implementation "androidx.room:room-coroutines:$room_coroutines_version"
    kapt "android.arch.persistence.room:compiler:$room_version"

    // Paging Library
    implementation "androidx.paging:paging-runtime-ktx:$paging_runtime_version"
    implementation "androidx.paging:paging-rxjava2-ktx:$paging_runtime_version"

    // Worker Manager Library
    implementation "androidx.work:work-runtime-ktx:$work_manager_version"

    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$android_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
}
